/**
 * G√©n√©rateur de template pour les Pull Requests
 */

class PRTemplateGenerator {
  /**
   * G√©n√®re le template de base d'une PR
   * @param {Object} options - Options de la PR
   * @returns {string} Template format√© en markdown
   */
  static generateTemplate({
    title,
    type = 'feature',
    description = '',
    tests = [],
    screenshots = [],
    tickets = []
  }) {
    return `# ${title}

## Description
${description}

## Type de changement
${this.generateTypeCheckboxes(type)}

## Impact des changements
<!-- D√©crivez l'impact de vos changements sur l'application -->

## Tests effectu√©s
${this.generateTestsList(tests)}

## Captures d'√©cran
${this.generateScreenshotsList(screenshots)}

## Tickets li√©s
${this.generateTicketsList(tickets)}

## Checklist avant review
- [ ] J'ai effectu√© une auto-review de mon code
- [ ] J'ai comment√© mon code aux endroits complexes
- [ ] J'ai mis √† jour la documentation
- [ ] J'ai ajout√© des tests
- [ ] J'ai v√©rifi√© la couverture de code
- [ ] J'ai test√© les cas limites
`;
  }

  /**
   * G√©n√®re les cases √† cocher pour le type de PR
   * @param {string} selectedType - Type s√©lectionn√©
   * @returns {string} Liste de cases √† cocher en markdown
   */
  static generateTypeCheckboxes(selectedType) {
    const types = [
      ['üöÄ Nouvelle fonctionnalit√©', 'feature'],
      ['üêõ Correction de bug', 'bug'],
      ['üìö Documentation', 'docs'],
      ['üé® Style', 'style'],
      ['‚ôªÔ∏è Refactoring', 'refactor'],
      ['‚ö° Performance', 'perf'],
      ['‚úÖ Tests', 'test']
    ];

    return types
      .map(([label, type]) => `- [${type === selectedType ? 'x' : ' '}] ${label}`)
      .join('\n');
  }

  /**
   * G√©n√®re la liste des tests effectu√©s
   * @param {string[]} tests - Liste des tests
   * @returns {string} Liste format√©e en markdown
   */
  static generateTestsList(tests) {
    if (!tests.length) {
      return '- [ ] Tests unitaires\n- [ ] Tests d\'int√©gration\n- [ ] Tests manuels';
    }

    return tests.map(test => `- [x] ${test}`).join('\n');
  }

  /**
   * G√©n√®re la liste des captures d'√©cran
   * @param {string[]} screenshots - Liste des chemins des captures
   * @returns {string} Liste format√©e en markdown
   */
  static generateScreenshotsList(screenshots) {
    if (!screenshots.length) {
      return '<!-- Si applicable, ajoutez des captures d\'√©cran -->';
    }

    return screenshots
      .map(screenshot => `![Screenshot](${screenshot})`)
      .join('\n\n');
  }

  /**
   * G√©n√®re la liste des tickets li√©s
   * @param {string[]} tickets - Liste des identifiants de tickets
   * @returns {string} Liste format√©e en markdown
   */
  static generateTicketsList(tickets) {
    if (!tickets.length) {
      return '<!-- R√©f√©rencez les tickets JIRA/GitHub li√©s -->';
    }

    return tickets
      .map(ticket => `- ${ticket}`)
      .join('\n');
  }
}

module.exports = PRTemplateGenerator;
